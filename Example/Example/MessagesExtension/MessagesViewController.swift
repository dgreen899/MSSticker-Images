//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Radif Sharafullin on 8/24/16.
//  Copyright Â© 2016 Radif Sharafullin. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UICollectionViewDelegate, UICollectionViewDataSource {
    @IBOutlet weak var _collectionView: UICollectionView!
    var _stickers = [StickerData]()
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        
        //generate stickers
        
        let generate = { [weak self] (imageName:String, maxFrame:Int, localizedDescription:String) in
            var images = [String]()
            for i in (1...maxFrame){
                images.append(String.init(format: "%@%02d", imageName, i))
            }
            self?._stickers.append(StickerData(images: images, name: localizedDescription, fps:14))
        }
        
        
        generate("elephant", 34, "test_big_filesize")
        generate("elephant_big", 6, "test_big_image_frame")

        
        for i in (0...100){
            generate("elephant", 18, "test_\(i)")
        }
        
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    // MARK: - collectionView data source
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int{
        return _stickers.count
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell{
        
        let stickerData = _stickers[indexPath.row]
        
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ExampleCollectionViewCell.kReuseIdentifier, for: indexPath as IndexPath) as? ExampleCollectionViewCell else { fatalError("Unable to dequeue a cell") }
        
       cell.render(stickerData: stickerData)
        
        return cell
    }


}
